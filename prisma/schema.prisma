// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  shortened_links ShortenedLink[]

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

model ShortenedLink {
  id                     String    @id @default(cuid())
  userId                 String
  originalUrl            String
  slug                   String    @unique
  clicks                 Int       @default(0)
  expiresAt              DateTime?
  enableIntermediatePage Boolean   @default(false)

  user       User        @relation(fields: [userId], references: [id])
  linkClicks LinkClick[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("shortened_links")
}

model LinkClick {
  id              String      @id @default(cuid())
  shortenedLinkId String
  ipAddress       String?
  userAgent       String?
  country         String?
  deviceType      DeviceType?
  referrer        String?
  timestamp       DateTime    @default(now())

  shortenedLink ShortenedLink @relation(fields: [shortenedLinkId], references: [id], onDelete: Cascade)

  @@map("link_clicks")
}

enum DeviceType {
  MOBILE
  DESKTOP

  @@map("device_type")
}
